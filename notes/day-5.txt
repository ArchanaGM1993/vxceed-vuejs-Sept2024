v-model with nested component:

v-model as attribute with nested component for two way binding:

<NestedComp :props-name="data" @update:props-name="parent-method"/>

can be simplified into

<NestedComp v-model:props-name="data"/>

Rule: the event name (emit) must be like this in the nested component=> update:props-name and you must emit that event from the child and also pass data of the same type as that of the props type

if the props name is "modelValue" and the emit name is "update:model-value", then following line can be written

<NestedComp v-model="data"/>

 which is equivalent to 

<NestedComp :model-value="data" @update:model-value="parent-method"/>

but if the props and emit name is something differnt from "modelValue" then following line should be written

<NestedComp v-model:props-name="data"/>
 which is equivalent to 

<NestedComp :props-name="data" @update:props-name="parent-method"/>


watch option, lifecycle and data fetching:
1. data => reactive object with data. any change in the data will update the UI also.
2. computed => a method (acts as a getter) which is used to derive any value from a data. if the data is updated, the computed property will be invoked instantly.
3. methods=> regular methods used to mutate/update the data
4. watch => a method/property which watches a data property just like computed property, but this watch property is used to write "side-effect causing code"


lifecycle methods of a component
---------------------------------------

const header = document.createElement('h2')
header.innerHTML=`Welcome to Watch and data fetching`
document.getElementById("app").appendChild(header)



<script>
export default{
	setUp(){
		const name = ref('')
		const updateName=(value)=> name.value = value;
		return {name, updateName}
	}
}
</script>


















